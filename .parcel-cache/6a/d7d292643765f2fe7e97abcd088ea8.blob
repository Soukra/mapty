!function(){function t(t,e,s){return e in t?Object.defineProperty(t,e,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[e]=s,t}class e{constructor(e,s,o){t(this,"date",new Date),t(this,"id",(Date.now()+"").slice(-10)),t(this,"clicks",0),this.coords=e,this.distance=s,this.duration=o}_setDescription(){this.description=`${this.type[0].toUpperCase()}${this.type.slice(1)} on ${["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]} ${this.date.getDate()}`}click(){this.clicks++}}class s extends e{constructor(e,s,o,n){super(e,s,o),t(this,"type","running"),this.cadence=n,this.calcPace(),this._setDescription()}calcPace(){return this.pace=this.duration/this.distance,this.pace}}class o extends e{constructor(e,s,o,n){super(e,s,o),t(this,"type","cycling"),this.elevationGain=n,this.calcSpeed(),this._setDescription()}calcSpeed(){return this.speed=this.distance/(this.duration/60),this.speed}}const n=document.querySelector(".form"),i=document.querySelector(".workouts"),a=document.querySelector(".form__input--type"),r=document.querySelector(".form__input--distance"),c=document.querySelector(".form__input--duration"),u=document.querySelector(".form__input--cadence"),l=document.querySelector(".form__input--elevation");new class{constructor(){t(this,"_map",void 0),t(this,"_mapZoomLevel",13),t(this,"_mapEvent",void 0),t(this,"_workouts",[]),this._getPosition(),this._getLocalStorage(),n.addEventListener("submit",this._newWorkout.bind(this)),a.addEventListener("change",this._toggleElevationField),i.addEventListener("click",this._moveToPopup.bind(this))}_getPosition(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(this._loadMap.bind(this),(function(){alert("Could not get your position")}))}_loadMap(t){const{latitude:e}=t.coords,{longitude:s}=t.coords,o=[e,s];this._map=L.map("map").setView(o,this._mapZoomLevel),L.tileLayer("https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(this._map),this._map.on("click",this._showForm.bind(this)),this._workouts.forEach((t=>{this._renderWorkoutMarker(t)}))}_showForm(t){this._mapEvent=t,n.classList.remove("hidden"),r.focus()}_hideForm(){r.value=c.value=u.value=l.value="",n.style.display="none",n.classList.add("hidden"),setTimeout((()=>n.style.display="grid"),1e3)}_toggleElevationField(){l.closest(".form__row").classList.toggle("form__row--hidden"),u.closest(".form__row").classList.toggle("form__row--hidden")}_newWorkout(t){const e=(...t)=>t.every((t=>Number.isFinite(t))),n=(...t)=>t.every((t=>t>0));t.preventDefault();const i=a.value,p=+r.value,d=+c.value,{lat:_,lng:h}=this._mapEvent.latlng;let m;if("running"===i){const t=+u.value;if(!e(p,d,t)||!n(p,d,t))return alert("Inputs have to be positive numbers!");m=new s([_,h],p,d,t)}if("cycling"===i){const t=+l.value;if(!e(p,d,t)||!n(p,d))return alert("Inputs have to be positive numbers!");m=new o([_,h],p,d,t)}this._workouts.push(m),this._renderWorkoutMarker(m),this._renderWorkout(m),this._hideForm(),this._setLocalStorage()}_renderWorkoutMarker(t){L.marker(t.coords).addTo(this._map).bindPopup(L.popup({maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:`${t.type}-popup`})).setPopupContent(`${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"} ${t.description}`).openPopup()}_renderWorkout(t){let e=`\n      <li class="workout workout--${t.type}" data-id="${t.id}">\n        <h2 class="workout__title">${t.description}</h2>\n        <div class="workout__details">\n          <span class="workout__icon">${"running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"}</span>\n          <span class="workout__value">${t.distance}</span>\n          <span class="workout__unit">km</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">‚è±</span>\n          <span class="workout__value">${t.duration}</span>\n          <span class="workout__unit">min</span>\n        </div>\n    `;"running"===t.type&&(e+=`\n        <div class="workout__details">\n          <span class="workout__icon">‚ö°Ô∏è</span>\n          <span class="workout__value">${t.pace.toFixed(1)}</span>\n          <span class="workout__unit">min/km</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">ü¶∂üèº</span>\n          <span class="workout__value">${t.cadence}</span>\n          <span class="workout__unit">spm</span>\n        </div>\n      </li>\n      `),"cycling"===t.type&&(e+=`\n        <div class="workout__details">\n          <span class="workout__icon">‚ö°Ô∏è</span>\n          <span class="workout__value">${t.speed.toFixed(1)}</span>\n          <span class="workout__unit">km/h</span>\n        </div>\n        <div class="workout__details">\n          <span class="workout__icon">‚õ∞</span>\n          <span class="workout__value">${t.elevationGain}</span>\n          <span class="workout__unit">m</span>\n        </div>\n      </li>\n      `),n.insertAdjacentHTML("afterend",e)}_moveToPopup(t){if(!this._map)return;const e=t.target.closest(".workout");if(!e)return;const s=this._workouts.find((t=>t.id===e.dataset.id));this._map.setView(s.coords,this._mapZoomLevel,{animate:!0,pan:{duration:1}})}_setLocalStorage(){localStorage.setItem("workouts",JSON.stringify(this._workouts))}_getLocalStorage(){const t=JSON.parse(localStorage.getItem("workouts"));t&&(this._workouts=t,this._workouts.forEach((t=>{this._renderWorkout(t)})))}reset(){localStorage.removeItem("workouts"),location.reload()}}}();
//# sourceMappingURL=index.HASH_REF_e3630017c856a6c866ad16f3a77d659d.js.map
