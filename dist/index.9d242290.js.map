{"mappings":"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","sources":["./script.js"],"sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n  id = (Date.now() + '').slice(-10);\n  clicks = 0;\n\n  constructor(coords, distance, duration) {\n    // this.date = ...\n    // this.id = ...\n    this.coords = coords; // [lat, lng]\n    this.distance = distance; // in km\n    this.duration = duration; // in min\n  }\n\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\nclass Running extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min/km\n    this.pace = this.duration / this.distance;\n    return this.pace;\n  }\n}\n\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling';\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60);\n    return this.speed;\n  }\n}\n\n// const run1 = new Running([39, -12], 5.2, 24, 178);\n// const cycling1 = new Cycling([39, -12], 27, 95, 523);\n// console.log(run1, cycling1);\n\n///////////////////////////////////////\n// APPLICATION ARCHITECTURE\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nclass App {\n  _map;\n  _mapZoomLevel = 13;\n  _mapEvent;\n  _workouts = [];\n\n  constructor() {\n    // Get user's position\n    this._getPosition();\n\n    // Get data from local storage\n    this._getLocalStorage();\n\n    // Attach event handlers\n    form.addEventListener('submit', this._newWorkout.bind(this));\n    inputType.addEventListener('change', this._toggleElevationField);\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n  }\n\n  _getPosition() {\n    if (navigator.geolocation)\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n        function () {\n          alert('Could not get your position');\n        }\n      );\n  }\n\n  _loadMap(position) {\n    const { latitude } = position.coords;\n    const { longitude } = position.coords;\n    // console.log(`https://www.google.pt/maps/@${latitude},${longitude}`);\n\n    const coords = [latitude, longitude];\n\n    this._map = L.map('map').setView(coords, this._mapZoomLevel);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n    }).addTo(this._map);\n\n    // Handling clicks on map\n    this._map.on('click', this._showForm.bind(this));\n\n    this._workouts.forEach(work => {\n      this._renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this._mapEvent = mapE;\n    form.classList.remove('hidden');\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    // Empty inputs\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n    const allPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    e.preventDefault();\n\n    // Get data from form\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this._mapEvent.latlng;\n    let workout;\n\n    // If workout running, create running object\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      // Check if data is valid\n      if (\n        // !Number.isFinite(distance) ||\n        // !Number.isFinite(duration) ||\n        // !Number.isFinite(cadence)\n        !validInputs(distance, duration, cadence) ||\n        !allPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Running([lat, lng], distance, duration, cadence);\n    }\n\n    // If workout cycling, create cycling object\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    // Add new object to workout array\n    this._workouts.push(workout);\n\n    // Render workout on map as marker\n    this._renderWorkoutMarker(workout);\n\n    // Render workout on list\n    this._renderWorkout(workout);\n\n    // Hide form + clear input fields\n    this._hideForm();\n\n    // Set local storage to all workouts\n    this._setLocalStorage();\n  }\n\n  _renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this._map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n      <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">\n        <h2 class=\"workout__title\">${workout.description}</h2>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">${\n            workout.type === 'running' ? 'üèÉ‚Äç‚ôÇÔ∏è' : 'üö¥‚Äç‚ôÄÔ∏è'\n          }</span>\n          <span class=\"workout__value\">${workout.distance}</span>\n          <span class=\"workout__unit\">km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚è±</span>\n          <span class=\"workout__value\">${workout.duration}</span>\n          <span class=\"workout__unit\">min</span>\n        </div>\n    `;\n\n    if (workout.type === 'running')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">ü¶∂üèº</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n      </li>\n      `;\n\n    if (workout.type === 'cycling')\n      html += `\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚ö°Ô∏è</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">‚õ∞</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n      </li>\n      `;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    // BUGFIX: When we click on a workout before the map has loaded, we get an error. But there is an easy fix:\n    if (!this._map) return;\n\n    const workoutEl = e.target.closest('.workout');\n\n    if (!workoutEl) return;\n\n    const workout = this._workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this._map.setView(workout.coords, this._mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n\n    // using the public interface\n    // workout.click();\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this._workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n\n    if (!data) return;\n\n    this._workouts = data;\n\n    this._workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"],"names":["$7e7826c51b2a67966a0c063b231575d8$var$Workout","constructor","coords","distance","duration","Date","now","slice","this","_setDescription","description","type","toUpperCase","months","date","getMonth","getDate","click","clicks","$7e7826c51b2a67966a0c063b231575d8$var$Running","cadence","super","calcPace","pace","$7e7826c51b2a67966a0c063b231575d8$var$Cycling","elevationGain","calcSpeed","speed","$7e7826c51b2a67966a0c063b231575d8$var$form","document","querySelector","$7e7826c51b2a67966a0c063b231575d8$var$containerWorkouts","$7e7826c51b2a67966a0c063b231575d8$var$inputType","$7e7826c51b2a67966a0c063b231575d8$var$inputDistance","$7e7826c51b2a67966a0c063b231575d8$var$inputDuration","$7e7826c51b2a67966a0c063b231575d8$var$inputCadence","$7e7826c51b2a67966a0c063b231575d8$var$inputElevation","$7e7826c51b2a67966a0c063b231575d8$var$app","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","_map","L","map","setView","_mapZoomLevel","tileLayer","attribution","addTo","on","_showForm","_workouts","forEach","work","_renderWorkoutMarker","mapE","_mapEvent","classList","remove","focus","_hideForm","value","style","display","add","setTimeout","closest","toggle","e","validInputs","inputs","every","inp","Number","isFinite","allPositive","preventDefault","lat","lng","latlng","workout","elevation","push","_renderWorkout","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","id","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","reset","removeItem","location","reload"],"version":3,"file":"index.9d242290.js.map"}